/*
 * This file was automatically generated by EvoSuite
 * Sat May 13 22:00:05 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class CalDay_ESTest extends CalDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1, 1, 1, 1, 80, " --- \n", "k,H^QWAm<ldfkWdWK@)");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay1 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay1.getAppts();
      linkedList0.add(appt0);
      calDay0.appts = linkedList0;
      Appt appt1 = new Appt(9, 1, 9, 3, 5, " --- \n", "3'H1>&cPH");
      calDay0.addAppt(appt1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-10), (-10), (-10));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.iterator();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.isValid();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-226), (-226), (-1735), (-1735), (-1735));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = (-2856);
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-10), (-10), (-10));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 1, 1, " --- \n", "uJ:yTOxxf");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.addAppt(appt0);
      calDay0.getSizeAppts();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-226), (-226), (-1735), (-1735), (-1735));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.month = (-1735);
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(60000, 60000, 1);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.day = (-2856);
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1, 1, 1, 1, 80, "", "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 80, 1);
      CalDay calDay1 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay1.getAppts();
      calDay0.appts = linkedList0;
      calDay0.addAppt(appt0);
      calDay0.getAppts();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(104, 1, 1, 0, 104);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.appts = null;
      // Undeclared exception!
      try {
        calDay0.toString();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4637, 0, 714, 1, (-820));
      mockGregorianCalendar0.setLenient(false);
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");

      } catch(IllegalArgumentException e) {
         //
         // DAY_OF_MONTH
         //
         assertThrownBy("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getYear();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.getDay();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-226), (-226), (-1735), (-1735), (-1735));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.getMonth();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-226), (-226), (-1735), (-1735), (-1735));
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      calDay0.isValid();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 1, 80, " --- \n", "k,H^QWAm<ldfkWdWK@)");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      linkedList0.add(appt0);
      calDay0.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try {
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.iterator();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Appt appt0 = new Appt(1, 1, 1, 1, 80, "", "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 80, 1);
      CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      Appt appt1 = new Appt(567, 1, 1, (-3017), 1, "", "Lw@i/MX~a[{)>@W");
      linkedList0.add(appt1);
      calDay0.addAppt(appt0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1, 1, 1, 1, 80, " --- \n", "k,H^QWAm<ldfkWdWK@)");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay1 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
      LinkedList<Appt> linkedList0 = calDay1.getAppts();
      linkedList0.add(appt0);
      calDay0.appts = linkedList0;
      calDay0.addAppt(appt0);
      assertEquals(0, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt(1, 1, 1, 1, 80, " --- \n", "k,H^QWAm<ldfkWdWK@)");
      // Undeclared exception!
      try {
        calDay0.addAppt(appt0);
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Appt appt0 = new Appt((-986), (-1), 5, (-2856), (-4192), "rBgm:Lg!c ", "rBgm:Lg!c ");
      calDay0.addAppt(appt0);
      assertEquals(5, appt0.getStartDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try {
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");

      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      String string0 = calDay0.toString();
      assertEquals("", string0);
  }
    @Test //testing default constructor
    public void test0() throws Throwable {
        CalDay test = new CalDay();
        assertFalse(test.isValid());
    }

    @Test //testing calendar
    public void test1() throws Throwable {
        GregorianCalendar temp = new GregorianCalendar(1,1,1);
        CalDay test = new CalDay(temp);

        assertEquals(1, test.year);
        assertEquals(1, test.month);
        assertEquals(1, test.day);

        assertEquals(1, test.getDay());
        assertEquals(1, test.getMonth());
        assertEquals(1, test.getYear());
    }

    @Test //testing addAppt
    public void test2() throws Throwable {
        GregorianCalendar temp = new GregorianCalendar(1,1,1);
        Appt temp1 = new Appt(1,1,1,1,1,"Yes","No");
        Appt temp2 = new Appt(1,1,1,1,1,"Yes","No");
        Appt rotten = new Appt(-1,-1,-1,-1,-1,"","");
        CalDay test = new CalDay(temp);
        StringBuilder sb = new StringBuilder();

        assertTrue(test.isValid());
        assertEquals(0, test.getSizeAppts());

        test.addAppt(temp1);
        assertNotEquals(0, test.getSizeAppts());
        test.addAppt(temp2);
        assertNotEquals(1, test.getSizeAppts());

        assertTrue(temp1.getValid());
        assertTrue(temp2.getValid());

        assertEquals(temp1, test.getAppts().getFirst());
        assertEquals(temp2, test.getAppts().getLast());
        assertTrue(test.isValid());

        if (test.isValid()) {
            String todayDate = (test.getMonth()) + "/" + test.getDay() + "/" + test.getYear();
            sb.append("\t --- " + todayDate + " --- \n");
            sb.append(" --- -------- Appointments ------------ --- \n");
            Iterator<Appt> itr = test.appts.iterator();
            while(itr.hasNext()) {
                Object element = itr.next();

                sb.append(element + " ");
            }
            sb.append("\n");
        }

        assertEquals(sb.toString(), test.toString());

        test.addAppt(rotten);
        assertEquals(2, test.getSizeAppts());

        CalDay newTest = new CalDay(temp);
        newTest.addAppt(rotten);

        assertFalse(rotten.getValid());

        test.appts = null;
        test.valid = false;
        assertNull(test.iterator());

        test.valid = false;
        assertEquals("", test.toString());
    }

    @Test //testing iterator
    public void test3() throws Throwable {
        try{
            GregorianCalendar temp = new GregorianCalendar(1,1,1);
            Appt temp1 = new Appt(1,1,1,1,1,"Yes","No");
            Appt temp2 = new Appt(1,1,1,1,1,"Yes","No");
            Appt temp3 = new Appt(2,2,2,2,2,"","");
            Appt temp4 = new Appt(3,3,3,3,3,"","");
            CalDay test = new CalDay();
            CalDay throwaway = new CalDay();

            test.addAppt(temp1);
            test.addAppt(temp3);
            test.addAppt(temp4);

            Iterator<?> tempTest = test.iterator();

            assertEquals(temp1, tempTest.next());
            assertEquals(temp3, tempTest.next());
            assertEquals(temp4, tempTest.next());
            assertNull(throwaway);

            test.valid = true;
            test.getAppts().iterator();

            Appt rotten = new Appt(-1,-1,-1,-1,-1,"","");
            throwaway.addAppt(rotten);
            assertFalse(rotten.getValid());

            tempTest = throwaway.iterator();
            assertNull(tempTest);

            test.valid = true;

        }catch(Exception e){}
    }

    @Test //testing set appts
    public void test4() throws Throwable {
        try{
            GregorianCalendar temp = new GregorianCalendar(1,1,1);
            Appt temp1 = new Appt(1,1,1,1,1,"Yes","No");
            Appt temp2 = new Appt(1,1,1,1,1,"Yes","No");
            Appt rotten = new Appt(-1,-1,-1,-1,-1,"","");
            CalDay test = new CalDay();

            assertEquals(0, test.getSizeAppts());

            test.addAppt(temp1);
            test.addAppt(temp2);
            test.addAppt(rotten);

            assertEquals(2, test.getSizeAppts());

        }catch(Exception e){}
    }
}
