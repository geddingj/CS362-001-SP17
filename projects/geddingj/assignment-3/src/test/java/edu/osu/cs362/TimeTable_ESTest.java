/*
 * This file was automatically generated by EvoSuite
 * Sat May 13 21:55:57 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import edu.osu.cs362.TimeTable;
import java.util.GregorianCalendar;
import java.util.LinkedList;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.TooManyResourcesException;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true)
public class TimeTable_ESTest extends TimeTable_ESTest_scaffolding {

    @Test(timeout = 4000)
    public void test00()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1, 1, 1, 1, 1, "X%ZK", "X%ZK");
        linkedList0.add(appt0);
        linkedList0.add(appt0);
        timeTable0.deleteAppt(linkedList0, appt0);
    }

    @Test(timeout = 4000)
    public void test01()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
            fail("Expecting exception: TooManyResourcesException");

        } catch(TooManyResourcesException e) {
            //
            // Loop has been executed more times than the allowed 10000
            //
            assertThrownBy("org.evosuite.runtime.LoopCounter", e);
        }
    }

    @Test(timeout = 4000)
    public void test02()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        // Undeclared exception!
        try {
            timeTable0.getApptRange((LinkedList<Appt>) null, (GregorianCalendar) null, (GregorianCalendar) null);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("edu.osu.cs362.TimeTable", e);
        }
    }

    @Test(timeout = 4000)
    public void test03()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3148, 3148, (-840), 3148, 5257, 1);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        mockGregorianCalendar0.setLenient(false);
        // Undeclared exception!
        try {
            timeTable0.getApptRange((LinkedList<Appt>) null, mockGregorianCalendar0, mockGregorianCalendar1);
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // MONTH
            //
            assertThrownBy("java.util.GregorianCalendar", e);
        }
    }

    @Test(timeout = 4000)
    public void test04()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 1, 1);
        CalDay calDay0 = new CalDay((GregorianCalendar) mockGregorianCalendar0);
        LinkedList<Appt> linkedList0 = calDay0.getAppts();
        linkedList0.add((Appt) null);
        Appt appt0 = new Appt(1, 1, 1, 1, 1275, "f7S", (String) null);
        // Undeclared exception!
        try {
            timeTable0.deleteAppt(linkedList0, appt0);
            fail("Expecting exception: NullPointerException");

        } catch(NullPointerException e) {
            //
            // no message in exception (getMessage() returned null)
            //
            assertThrownBy("edu.osu.cs362.TimeTable", e);
        }
    }

    @Test(timeout = 4000)
    public void test05()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(9, 9, 9, 9, 9, "f7S", "f7S");
        linkedList0.add(appt0);
        Appt appt1 = new Appt(9, 9, 9, 9, 9, "f7S", "f7S");
        timeTable0.deleteAppt(linkedList0, appt1);
    }

    @Test(timeout = 4000)
    public void test06()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1, 1, 1, 1, 1, "X%ZK", "X%ZK");
        linkedList0.add(appt0);
        timeTable0.deleteAppt(linkedList0, appt0);
    }

    @Test(timeout = 4000)
    public void test07()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1025, 1025, 1025, 1025, 1025, "", "");
        timeTable0.deleteAppt(linkedList0, appt0);
    }

    @Test(timeout = 4000)
    public void test08()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        timeTable0.deleteAppt(linkedList0, (Appt) null);
    }

    @Test(timeout = 4000)
    public void test09()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        Appt appt0 = new Appt(9, 9, 9, 9, 9, "f7S", "f7S");
        timeTable0.deleteAppt((LinkedList<Appt>) null, appt0);
    }

    @Test(timeout = 4000)
    public void test10()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1, 1, 1, 1, 1, "X%ZK", "X%ZK");
        linkedList0.add(appt0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3137, 1, 1);
        System.setCurrentTimeMillis((-3353));
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar1, mockGregorianCalendar0);
    }

    @Test(timeout = 4000)
    public void test11()  throws Throwable  {
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1, 1, 1, 1, 1, "X%ZK", "X%ZK");
        linkedList0.add(appt0);
        System.setCurrentTimeMillis((-3353));
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
        System.setCurrentTimeMillis(3137);
        TimeTable timeTable0 = new TimeTable();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        // Undeclared exception!
        try {
            timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
            fail("Expecting exception: IndexOutOfBoundsException");

        } catch(IndexOutOfBoundsException e) {
            //
            // Index: 1, Size: 1
            //
            assertThrownBy("java.util.LinkedList", e);
        }
    }

    @Test(timeout = 4000)
    public void test12()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1025, (-3351), 46, 0, 0, "", "");
        linkedList0.add(appt0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3148, 3148, (-840), 3148, 5257, 1);
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3148,MONTH=3148,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-840,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3148,HOUR_OF_DAY=3148,MINUTE=5257,SECOND=1,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
    }

    @Test(timeout = 4000)
    public void test13()  throws Throwable  {
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        Appt appt0 = new Appt(1, 1, 1, 1, 1, "X%ZK", "X%ZK");
        linkedList0.add(appt0);
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3137, 1, 1);
        TimeTable timeTable0 = new TimeTable();
        MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar();
        timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar1);
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3137,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
        assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar1.toString());
    }

    @Test(timeout = 4000)
    public void test14()  throws Throwable  {
        TimeTable timeTable0 = new TimeTable();
        LinkedList<Appt> linkedList0 = new LinkedList<Appt>();
        MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3137, 1, 1);
        // Undeclared exception!
        try {
            timeTable0.getApptRange(linkedList0, mockGregorianCalendar0, mockGregorianCalendar0);
            fail("Expecting exception: IllegalArgumentException");

        } catch(IllegalArgumentException e) {
            //
            // Second date specified is not before the first date specified.
            //
            assertThrownBy("edu.osu.cs362.TimeTable", e);
        }
    }
    @Test //testing timetable
    public void test0() throws Throwable {

        //Construct Functions
        TimeTable test = new TimeTable();
        GregorianCalendar greg = new GregorianCalendar(1,1,1);
        GregorianCalendar orian = new GregorianCalendar(2, 2, 2);
        Appt temp1 = new Appt(1,1,1,1,1,"ya","nah");
        Appt temp2 = new Appt(2,2,2,2,2,"ya","nah");
        LinkedList<Appt> lin = new LinkedList<Appt>();

        //Attempt adding to a LinkedList
        lin.add(temp1);
        lin.add(temp2);

        //Create a new linked list for CalDay to determine difference
        LinkedList<CalDay> cal = new LinkedList<CalDay>();
        cal = test.getApptRange(lin, greg, orian);

        //Assert that the given Appts are valid
        assertTrue(temp1.getValid());
        assertTrue(temp2.getValid());

        //Assert the difference between Appts is correct
        assertEquals(394, cal.size());

        //Assert that temp1 and temp2 are the first and second/last values
        assertEquals(temp1, lin.getFirst());
        assertEquals(temp2, lin.getLast());


    }

    @Test //test for testing -- most test cases that were performed here have been moved
    public void test1() throws Throwable {

        //Construct functions
        TimeTable test = new TimeTable();
        GregorianCalendar greg = new GregorianCalendar(2,2,2);
        GregorianCalendar orian = new GregorianCalendar(1, 1, 1);
        Appt temp1 = new Appt(1,1,1,1,1,"ya","nah");
        Appt temp2 = new Appt(2,2,2,2,2,"ya","nah");
        LinkedList<Appt> lin = new LinkedList<Appt>();
        CalDay cal = new CalDay(new GregorianCalendar());
        cal.addAppt(temp1);
        test.getApptRange(cal.getAppts(),orian, greg);

        lin.add(temp1);
        lin.add(temp2);

        //LinkedList<CalDay> cal = new LinkedList<CalDay>();
        //cal = test.getApptRange(lin, greg, orian);

    }

    @Test //testing removal
    public void test2() throws Throwable {
        //Constructing functions
        TimeTable test = new TimeTable();
        Appt temp1 = new Appt(1,1,1,1,1,"ya","nah");
        Appt temp2 = new Appt(25,1,1,1,1,"ya","nah");
        LinkedList<Appt> lin = new LinkedList<Appt>();

        //Ensure that temp1 is valid and temp2 is not
        assertTrue(temp1.getValid());
        assertFalse(temp2.getValid());

        //Test deleting a bad domain
        test.deleteAppt(null, temp1);

        //Ensure correct addition to LinkedList
        lin.add(temp1);
        assertEquals(temp1, lin.getFirst());

        //Test deleting previous value, a non-existent bad value, a previously deleted value, and a non-existent value.
        test.deleteAppt(lin, temp1);
        test.deleteAppt(lin, temp2);
        test.deleteAppt(lin, temp1);
        test.deleteAppt(lin, null);

    }

    @Test //PIT testing for deletion
    public void test3() throws Throwable{
        TimeTable temp = new TimeTable();
        Appt appt = new Appt(1, 1, 1, 1, 1, "a", "b");

        LinkedList<Appt> lin = new LinkedList<Appt>();
        lin.add(new Appt(1, 1, 1, 1, 3, "a", "c"));
        lin.add(appt);

        assertEquals(lin, temp.deleteAppt(lin, appt));
        assertNull(temp.deleteAppt(lin, new Appt(1, 1, 1, 1, 2, "a", "d")));

        Appt temp3 = new Appt(-1,0,0,0,0,"ya","nah");
        assertNull(temp.deleteAppt(null, null));
        assertNull(temp.deleteAppt(lin, temp3));
    }
}
